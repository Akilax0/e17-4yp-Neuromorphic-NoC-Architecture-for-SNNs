$date
	Sat May  6 22:36:29 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbenchCPU $end
$var wire 3 ! memWrite [2:0] $end
$var wire 4 " memRead [3:0] $end
$var wire 1 # insReadEn $end
$var wire 32 $ WRITE_DATA [31:0] $end
$var wire 32 % READ_DATA [31:0] $end
$var wire 32 & PC [31:0] $end
$var wire 128 ' MAIN_MEM_WRITE_DATA [127:0] $end
$var wire 1 ( MAIN_MEM_WRITE $end
$var wire 128 ) MAIN_MEM_READ_DATA [127:0] $end
$var wire 1 * MAIN_MEM_READ $end
$var wire 1 + MAIN_MEM_BUSY_WAIT $end
$var wire 28 , MAIN_MEM_ADDRESS [27:0] $end
$var wire 128 - INS_MEM_READ_DATA [127:0] $end
$var wire 1 . INS_MEM_READ $end
$var wire 1 / INS_MEM_BUSY_WAIT $end
$var wire 28 0 INS_MEM_ADDRESS [27:0] $end
$var wire 1 1 INS_CACHE_BUSY_WAIT $end
$var wire 32 2 INS [31:0] $end
$var wire 1 3 BUSY_WAIT $end
$var wire 32 4 ADDRESS [31:0] $end
$var reg 1 5 CLK $end
$var reg 1 6 RESET $end
$scope module myCacheMemory $end
$var wire 1 7 TAG_MATCH $end
$var wire 128 8 block [127:0] $end
$var wire 1 5 clock $end
$var wire 1 6 reset $end
$var wire 32 9 writedata [31:0] $end
$var wire 3 : write [2:0] $end
$var wire 25 ; tag [24:0] $end
$var wire 4 < read [3:0] $end
$var wire 2 = offset [1:0] $end
$var wire 3 > index [2:0] $end
$var wire 2 ? byte_offset [1:0] $end
$var wire 32 @ address [31:0] $end
$var wire 128 A MAIN_MEM_READ_DATA [127:0] $end
$var wire 1 + MAIN_MEM_BUSY_WAIT $end
$var reg 128 B CURRENT_DATA [127:0] $end
$var reg 1 C CURRENT_DIRTY $end
$var reg 25 D CURRENT_TAG [24:0] $end
$var reg 1 E CURRENT_VALID $end
$var reg 28 F MAIN_MEM_ADDRESS [27:0] $end
$var reg 1 * MAIN_MEM_READ $end
$var reg 1 ( MAIN_MEM_WRITE $end
$var reg 128 G MAIN_MEM_WRITE_DATA [127:0] $end
$var reg 1 3 busywait $end
$var reg 32 H cache_readdata [31:0] $end
$var reg 32 I cache_writedata [31:0] $end
$var reg 2 J next_state [1:0] $end
$var reg 1 K readCache $end
$var reg 1 L readaccess $end
$var reg 32 M readdata [31:0] $end
$var reg 2 N state [1:0] $end
$var reg 1 O writeCache $end
$var reg 1 P writeCache_mem $end
$var reg 32 Q write_mask [31:0] $end
$var reg 1 R writeaccess $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module myDataMem $end
$var wire 28 T address [27:0] $end
$var wire 1 5 clock $end
$var wire 1 * read $end
$var wire 1 6 reset $end
$var wire 1 ( write $end
$var wire 128 U writedata [127:0] $end
$var reg 1 + busywait $end
$var reg 1 V readaccess $end
$var reg 128 W readdata [127:0] $end
$var reg 1 X writeaccess $end
$var integer 32 Y i [31:0] $end
$upscope $end
$scope module myInsCacheMemory $end
$var wire 1 5 clock $end
$var wire 1 6 reset $end
$var wire 25 Z tag [24:0] $end
$var wire 1 # read $end
$var wire 2 [ offset [1:0] $end
$var wire 3 \ index [2:0] $end
$var wire 32 ] address [31:0] $end
$var wire 1 ^ TAG_MATCH $end
$var wire 128 _ MAIN_MEM_READ_DATA [127:0] $end
$var wire 1 / MAIN_MEM_BUSY_WAIT $end
$var reg 32 ` CURRENT_DATA [31:0] $end
$var reg 25 a CURRENT_TAG [24:0] $end
$var reg 1 b CURRENT_VALID $end
$var reg 28 c MAIN_MEM_ADDRESS [27:0] $end
$var reg 1 . MAIN_MEM_READ $end
$var reg 1 1 busywait $end
$var reg 2 d next_state [1:0] $end
$var reg 1 e readCache $end
$var reg 1 f readaccess $end
$var reg 32 g readdata [31:0] $end
$var reg 2 h state [1:0] $end
$var reg 128 i temp [127:0] $end
$var reg 1 j writeCache_mem $end
$var integer 32 k i [31:0] $end
$upscope $end
$scope module myInsMem $end
$var wire 28 l ADDRESS [27:0] $end
$var wire 1 5 CLK $end
$var wire 1 . READ $end
$var reg 1 / BUSYWAIT $end
$var reg 128 m READDATA [127:0] $end
$var reg 1 n READ_ACCESS $end
$upscope $end
$scope module mycpu $end
$var wire 1 5 CLK $end
$var wire 32 o DATA_CACHE_ADDR [31:0] $end
$var wire 1 3 DATA_CACHE_BUSY_WAIT $end
$var wire 32 p DATA_CACHE_DATA [31:0] $end
$var wire 32 q DATA_CACHE_READ_DATA [31:0] $end
$var wire 1 r FLUSH $end
$var wire 32 s INSTRUCTION [31:0] $end
$var wire 1 1 INS_CACHE_BUSY_WAIT $end
$var wire 4 t MEM_READ_S2 [3:0] $end
$var wire 32 u PC_NEXT [31:0] $end
$var wire 1 6 RESET $end
$var wire 4 v memReadEn [3:0] $end
$var wire 3 w memWriteEn [2:0] $end
$var wire 2 x REG_WRITE_SELECT_S2 [1:0] $end
$var wire 1 y REG_WRITE_EN_S2 $end
$var wire 32 z REG_WRITE_DATA [31:0] $end
$var wire 1 { OPERAND2_SEL $end
$var wire 1 | OPERAND1_SEL $end
$var wire 2 } OP2_HAZ_MUX_SEL [1:0] $end
$var wire 32 ~ OP2_HAZ_MUX_OUT [31:0] $end
$var wire 2 !" OP1_HAZ_MUX_SEL [1:0] $end
$var wire 32 "" OP1_HAZ_MUX_OUT [31:0] $end
$var wire 3 #" MEM_WRITE_S2 [2:0] $end
$var wire 4 $" IMMEDIATE_SELECT [3:0] $end
$var wire 32 %" IMMEDIATE_OUT_S2 [31:0] $end
$var wire 1 &" HAZ_MUX_SEL $end
$var wire 32 '" HAZ_MUX_OUT [31:0] $end
$var wire 32 (" DATA2_S2 [31:0] $end
$var wire 32 )" DATA1_S2 [31:0] $end
$var wire 1 *" BRANCH_SELECT_OUT $end
$var wire 4 +" BRANCH_SELECT [3:0] $end
$var wire 6 ," ALU_SELECT [5:0] $end
$var wire 32 -" ALU_OUT [31:0] $end
$var wire 32 ." ALU_IN_2 [31:0] $end
$var wire 32 /" ALU_IN_1 [31:0] $end
$var reg 32 0" PC [31:0] $end
$var reg 32 1" PC_PLUS_4 [31:0] $end
$var reg 32 2" PR_ALU_OUT_S3 [31:0] $end
$var reg 32 3" PR_ALU_OUT_S4 [31:0] $end
$var reg 6 4" PR_ALU_SELECT [5:0] $end
$var reg 4 5" PR_BRANCH_SELECT_S2 [3:0] $end
$var reg 32 6" PR_DATA_1_S2 [31:0] $end
$var reg 32 7" PR_DATA_2_S2 [31:0] $end
$var reg 32 8" PR_DATA_2_S3 [31:0] $end
$var reg 32 9" PR_DATA_CACHE_OUT [31:0] $end
$var reg 32 :" PR_IMMEDIATE_SELECT_OUT [31:0] $end
$var reg 32 ;" PR_INSTRUCTION [31:0] $end
$var reg 4 <" PR_MEM_READ_S2 [3:0] $end
$var reg 4 =" PR_MEM_READ_S3 [3:0] $end
$var reg 4 >" PR_MEM_READ_S4 [3:0] $end
$var reg 3 ?" PR_MEM_WRITE_S2 [2:0] $end
$var reg 3 @" PR_MEM_WRITE_S3 [2:0] $end
$var reg 1 A" PR_OPERAND1_SEL $end
$var reg 1 B" PR_OPERAND2_SEL $end
$var reg 32 C" PR_PC_S1 [31:0] $end
$var reg 32 D" PR_PC_S2 [31:0] $end
$var reg 32 E" PR_PC_S3 [31:0] $end
$var reg 32 F" PR_PC_S4 [31:0] $end
$var reg 5 G" PR_REGISTER_WRITE_ADDR_S2 [4:0] $end
$var reg 5 H" PR_REGISTER_WRITE_ADDR_S3 [4:0] $end
$var reg 5 I" PR_REGISTER_WRITE_ADDR_S4 [4:0] $end
$var reg 5 J" PR_REGISTER_WRITE_ADDR_S5 [4:0] $end
$var reg 1 K" PR_REG_WRITE_EN_S2 $end
$var reg 1 L" PR_REG_WRITE_EN_S3 $end
$var reg 1 M" PR_REG_WRITE_EN_S4 $end
$var reg 1 N" PR_REG_WRITE_EN_S5 $end
$var reg 2 O" PR_REG_WRITE_SELECT_S2 [1:0] $end
$var reg 2 P" PR_REG_WRITE_SELECT_S3 [1:0] $end
$var reg 2 Q" PR_REG_WRITE_SELECT_S4 [1:0] $end
$var reg 5 R" REG_READ_ADDR1_S2 [4:0] $end
$var reg 5 S" REG_READ_ADDR2_S2 [4:0] $end
$var reg 5 T" REG_READ_ADDR2_S3 [4:0] $end
$var reg 32 U" REG_WRITE_DATA_S5 [31:0] $end
$var reg 1 # insReadEn $end
$scope module myAlu $end
$var wire 32 V" INTER_AND [31:0] $end
$var wire 32 W" INTER_FWD [31:0] $end
$var wire 32 X" INTER_OR [31:0] $end
$var wire 32 Y" INTER_XOR [31:0] $end
$var wire 6 Z" SELECT [5:0] $end
$var wire 32 [" INTER_SUB [31:0] $end
$var wire 32 \" INTER_SRL [31:0] $end
$var wire 32 ]" INTER_SRA [31:0] $end
$var wire 32 ^" INTER_SLTU [31:0] $end
$var wire 32 _" INTER_SLT [31:0] $end
$var wire 32 `" INTER_SLL [31:0] $end
$var wire 32 a" INTER_REMU [31:0] $end
$var wire 32 b" INTER_REM [31:0] $end
$var wire 32 c" INTER_MULHU [31:0] $end
$var wire 32 d" INTER_MULHSU [31:0] $end
$var wire 32 e" INTER_MUL [31:0] $end
$var wire 32 f" INTER_DIV [31:0] $end
$var wire 32 g" INTER_ADD [31:0] $end
$var wire 32 h" DATA2 [31:0] $end
$var wire 32 i" DATA1 [31:0] $end
$var reg 32 j" RESULT [31:0] $end
$upscope $end
$scope module myBranchSelect $end
$var wire 4 k" SELECT [3:0] $end
$var wire 32 l" DATA2 [31:0] $end
$var wire 32 m" DATA1 [31:0] $end
$var wire 1 n" BNE $end
$var wire 1 o" BLTU $end
$var wire 1 p" BLT $end
$var wire 1 q" BGEU $end
$var wire 1 r" BGE $end
$var wire 1 s" BEQ $end
$var reg 1 *" MUX_OUT $end
$upscope $end
$scope module myControl $end
$var wire 32 t" INSTRUCTION [31:0] $end
$var wire 1 6 RESET $end
$var wire 1 u" funct3_mux_select $end
$var wire 1 | operand_1_select $end
$var wire 1 { operand_2_select $end
$var wire 1 y reg_file_write $end
$var wire 2 v" reg_write_select [1:0] $end
$var wire 7 w" opcode [6:0] $end
$var wire 3 x" main_mem_write [2:0] $end
$var wire 4 y" main_mem_read [3:0] $end
$var wire 4 z" immediate_select [3:0] $end
$var wire 7 {" funct7 [6:0] $end
$var wire 3 |" funct3 [2:0] $end
$var wire 4 }" branch_control [3:0] $end
$var wire 6 ~" alu_signal [5:0] $end
$scope module funct3_mux $end
$var wire 3 !# INPUT1 [2:0] $end
$var wire 3 "# INPUT2 [2:0] $end
$var wire 1 u" SELECT $end
$var reg 3 ## RESULT [2:0] $end
$upscope $end
$upscope $end
$scope module myImmediate $end
$var wire 32 $# INSTRUCTION [31:0] $end
$var wire 4 %# SELECT [3:0] $end
$var wire 5 &# TYPE6 [4:0] $end
$var wire 12 '# TYPE5 [11:0] $end
$var wire 12 (# TYPE4 [11:0] $end
$var wire 12 )# TYPE3 [11:0] $end
$var wire 20 *# TYPE2 [19:0] $end
$var wire 20 +# TYPE1 [19:0] $end
$var reg 32 ,# OUTPUT [31:0] $end
$upscope $end
$scope module myStage3Forwarding $end
$var wire 5 -# ADDR1 [4:0] $end
$var wire 5 .# ADDR2 [4:0] $end
$var wire 1 /# MEM_WRITE $end
$var wire 1 A" OP1_MUX $end
$var wire 1 B" OP2_MUX $end
$var wire 5 0# STAGE_3_ADDR [4:0] $end
$var wire 1 L" STAGE_3_REGWRITE_EN $end
$var wire 5 1# STAGE_4_ADDR [4:0] $end
$var wire 1 M" STAGE_4_REGWRITE_EN $end
$var wire 5 2# STAGE_5_EXTRA_ADDR [4:0] $end
$var wire 1 N" STAGE_5_EXTRA_REGWRITE_EN $end
$var reg 2 3# OP1_MUX_OUT [1:0] $end
$var reg 2 4# OP2_MUX_OUT [1:0] $end
$upscope $end
$scope module myreg $end
$var wire 1 5 CLK $end
$var wire 5 5# INADDRESS [4:0] $end
$var wire 32 6# OUT1 [31:0] $end
$var wire 5 7# OUT1ADDRESS [4:0] $end
$var wire 32 8# OUT2 [31:0] $end
$var wire 5 9# OUT2ADDRESS [4:0] $end
$var wire 1 6 RESET $end
$var wire 1 K" WRITE_EN $end
$var wire 32 :# IN [31:0] $end
$var integer 32 ;# i [31:0] $end
$upscope $end
$scope module operand1_mux $end
$var wire 32 <# INPUT2 [31:0] $end
$var wire 1 A" SELECT $end
$var wire 32 =# INPUT1 [31:0] $end
$var reg 32 ># RESULT [31:0] $end
$upscope $end
$scope module operand1_mux_haz $end
$var wire 32 ?# INPUT1 [31:0] $end
$var wire 32 @# INPUT2 [31:0] $end
$var wire 32 A# INPUT4 [31:0] $end
$var wire 2 B# SELECT [1:0] $end
$var wire 32 C# INPUT3 [31:0] $end
$var reg 32 D# RESULT [31:0] $end
$upscope $end
$scope module operand2_mux $end
$var wire 32 E# INPUT2 [31:0] $end
$var wire 1 B" SELECT $end
$var wire 32 F# INPUT1 [31:0] $end
$var reg 32 G# RESULT [31:0] $end
$upscope $end
$scope module operand2_mux_haz $end
$var wire 32 H# INPUT1 [31:0] $end
$var wire 32 I# INPUT2 [31:0] $end
$var wire 32 J# INPUT4 [31:0] $end
$var wire 2 K# SELECT [1:0] $end
$var wire 32 L# INPUT3 [31:0] $end
$var reg 32 M# RESULT [31:0] $end
$upscope $end
$scope module regWriteSelMUX $end
$var wire 32 N# INPUT1 [31:0] $end
$var wire 32 O# INPUT2 [31:0] $end
$var wire 32 P# INPUT3 [31:0] $end
$var wire 32 Q# INPUT4 [31:0] $end
$var wire 2 R# SELECT [1:0] $end
$var reg 32 S# RESULT [31:0] $end
$upscope $end
$scope module stage4_forward_unit $end
$var wire 5 T# REG_READ_ADDR2_S3 [4:0] $end
$var wire 5 U# STAGE4_REG_ADDR [4:0] $end
$var wire 32 V# STAGE_3_DATA [31:0] $end
$var wire 1 W# STAGE_3_MEM_WRITE $end
$var wire 1 X# STAGE_4_MEM_READ $end
$var reg 1 &" MUX_OUT $end
$upscope $end
$scope module stage4_forward_unit_mux $end
$var wire 32 Y# INPUT1 [31:0] $end
$var wire 32 Z# INPUT2 [31:0] $end
$var wire 1 &" SELECT $end
$var reg 32 [# RESULT [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 [#
b0 Z#
b0 Y#
xX#
0W#
bz V#
b0 U#
bx T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
bx J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
bx A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b100000 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
bx 2#
b0 1#
b0 0#
0/#
bx .#
bx -#
bx ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
bx %#
b0 $#
b0 ##
b0 "#
b0 !#
bzxx000 ~"
bx }"
b0 |"
b0 {"
bx z"
bx y"
bx x"
b0 w"
bx v"
xu"
b0 t"
1s"
1r"
1q"
0p"
0o"
0n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
bx f"
b0 e"
b0 d"
b0 c"
bx b"
bx a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
bx U"
bx T"
bx S"
bx R"
b0 Q"
b0 P"
b0 O"
xN"
0M"
0L"
0K"
bx J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
0B"
0A"
b0 @"
b0 ?"
bx >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b11111111111111111111111111111100 0"
b0 /"
b0 ."
b0 -"
bzxx000 ,"
bx +"
x*"
b0 )"
b0 ("
b0 '"
0&"
bx %"
bx $"
bx #"
b0 ""
b0 !"
b0 ~
b0 }
x|
x{
b0 z
xy
bx x
b0 w
b0 v
bz u
bz t
bx s
xr
bx q
b0 p
b0 o
0n
bx m
bx l
b1000 k
xj
bx i
b0 h
bx g
xf
xe
b0 d
bx c
0b
bx a
b0 `
bx _
x^
b11111111111111111111111111111100 ]
b111 \
b11 [
b1111111111111111111111111 Z
b100000000 Y
0X
bx W
0V
bx U
bx T
b1000 S
0R
b11111111111111111111111100000000 Q
xP
xO
b0 N
bx M
0L
xK
b0 J
b0 I
bx H
bx G
bx F
0E
bx D
0C
b0 B
bx A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
x7
16
15
b0 4
03
bx 2
01
bx 0
0/
x.
bx -
bx ,
0+
x*
bx )
x(
bx '
b11111111111111111111111111111100 &
bx %
b0 $
0#
b0 "
b0 !
$end
#10
bx )"
bx 6#
bx 7#
bx ("
bx 8#
bx 9#
bx w"
bx |"
bx !#
bx {"
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
b11111111111111111111111111111100 C"
bx ;"
bx t"
bx $#
x/#
xK"
bx O"
bx ?"
bz <"
xB"
xA"
bzxx000 4"
bzxx000 Z"
bx 5"
bx k"
b0 S"
b0 .#
b0 R"
b0 -#
bx :"
bx E#
0X#
bx z
bx :#
bx C#
bx L#
bx S#
b0 >"
bx 9"
bx N#
bx Z#
0N"
b0 J"
b0 2#
b0 U"
b0 A#
b0 J#
#40
0r
0*"
#100
05
#200
b0 z
b0 :#
b0 C#
b0 L#
b0 S#
0/#
b0 )"
b0 6#
b0 7#
b0 ("
b0 8#
b0 9#
b0 w"
b0 |"
b0 !#
b0 {"
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 9"
b0 N#
b0 Z#
0K"
b0 O"
b0 ?"
0B"
0A"
b0 4"
b0 Z"
b0 <"
b0 5"
b0 k"
b0 :"
b0 E#
b0 C"
b0 ;"
b0 t"
b0 $#
b100000 ;#
15
#210
bx )"
bx 6#
bx 7#
bx ("
bx 8#
bx 9#
bx w"
bx |"
bx !#
bx {"
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
b11111111111111111111111111111100 C"
bx ;"
bx t"
bx $#
x/#
xK"
bx O"
bx ?"
bz <"
xB"
xA"
bzxx000 4"
bzxx000 Z"
bx 5"
bx k"
bx :"
bx E#
b0 T"
b0 T#
bx z
bx :#
bx C#
bx L#
bx S#
bx 9"
bx N#
bx Z#
#250
06
#300
05
#400
15
#410
bz C"
b0x ^"
b0x _"
bx Y"
bx X"
bx V"
bx W"
bx ."
bx h"
bx G#
bx c"
bx d"
bx e"
bx ]"
bx \"
bx `"
bx ["
bx g"
bx /"
bx i"
bx >#
bx ~
bx l"
bx F#
bx M#
xq"
xo"
xr"
xp"
xn"
xs"
bx ""
bx m"
bx =#
bx D#
bx S"
bx .#
bx R"
bx -#
bx 7"
bx H#
bx 6"
bx ?#
b11111111111111111111111111111100 D"
b11111111111111111111111111111100 <#
bx G"
bx 5#
xW#
xR
xL
xL"
bx P"
bx !
bx :
bx w
bx @"
bz "
bz <
bz v
bz ="
bx `
xb
0e
0.
1f
11
bz [
bz \
bz Z
1#
bz &
bz ]
bz 0"
bx U"
bx A#
bx J#
#500
05
#600
bx 1"
0#
15
#700
05
#800
15
#900
05
#1000
15
#1100
05
#1200
15
#1300
05
#1400
15
#1500
05
#1600
15
#1700
05
#1800
15
#1900
05
#2000
15
#2100
05
#2200
15
#2300
05
#2400
15
#2500
05
#2600
15
#2700
05
#2800
15
#2900
05
#3000
15
#3100
05
#3200
15
#3300
05
#3400
15
#3500
05
#3600
15
#3700
05
#3800
15
#3900
05
#4000
15
#4100
05
#4200
15
#4300
05
#4400
15
#4500
05
#4600
15
#4700
05
#4800
15
#4900
05
#5000
15
#5100
05
#5200
15
#5300
05
#5400
15
#5500
05
#5600
15
#5700
05
#5800
15
#5900
05
#6000
15
#6100
05
#6200
15
#6300
05
#6400
15
#6500
05
#6600
15
#6700
05
#6800
15
#6900
05
#7000
15
#7100
05
#7200
15
#7300
05
#7400
15
#7500
05
#7600
15
#7700
05
#7800
15
#7900
05
#8000
15
#8100
05
#8200
15
#8300
05
#8400
15
#8500
05
#8600
15
#8700
05
#8800
15
#8900
05
#9000
15
#9100
05
#9200
15
#9300
05
#9400
15
#9500
05
#9600
15
#9700
05
#9800
15
#9900
05
#10000
15
#10100
05
#10200
15
#10300
05
#10400
15
#10500
05
#10600
15
#10700
05
#10800
15
#10900
05
#11000
15
#11100
05
#11200
15
#11300
05
#11400
15
#11500
05
#11600
15
#11700
05
#11800
15
#11900
05
#12000
15
#12100
05
#12200
15
#12300
05
#12400
15
#12500
05
#12600
15
#12700
05
#12800
15
#12900
05
#13000
15
#13100
05
#13200
15
#13300
05
#13400
15
#13500
05
#13600
15
#13700
05
#13800
15
#13900
05
#14000
15
#14100
05
#14200
15
#14300
05
#14400
15
#14500
05
#14600
15
#14700
05
#14800
15
#14900
05
#15000
15
#15100
05
#15200
15
#15300
05
#15400
15
#15500
05
#15600
15
#15700
05
#15800
15
#15900
05
#16000
15
#16100
05
#16200
15
#16300
05
#16400
15
#16500
05
#16600
15
#16700
05
#16800
15
#16900
05
#17000
15
#17100
05
#17200
15
#17300
05
#17400
15
#17500
05
#17600
15
#17700
05
#17800
15
#17900
05
#18000
15
#18100
05
#18200
15
#18300
05
#18400
15
#18500
05
#18600
15
#18700
05
#18800
15
#18900
05
#19000
15
#19100
05
#19200
15
#19300
05
#19400
15
#19500
05
#19600
15
#19700
05
#19800
15
#19900
05
#20000
15
#20100
05
#20200
15
#20300
05
#20400
15
#20500
05
#20600
15
#20700
05
#20800
15
#20900
05
#21000
15
#21100
05
#21200
15
#21300
05
#21400
15
#21500
05
#21600
15
#21700
05
#21800
15
#21900
05
#22000
15
#22100
05
#22200
15
#22300
05
#22400
15
#22500
05
#22600
15
#22700
05
#22800
15
#22900
05
#23000
15
#23100
05
#23200
15
#23300
05
#23400
15
#23500
05
#23600
15
#23700
05
#23800
15
#23900
05
#24000
15
#24100
05
#24200
15
#24300
05
#24400
15
#24500
05
#24600
15
#24700
05
#24800
15
#24900
05
#25000
15
#25100
05
#25200
15
#25300
05
#25400
15
#25500
05
#25600
15
#25700
05
#25800
15
#25900
05
#26000
15
#26100
05
#26200
15
#26300
05
#26400
15
#26500
05
#26600
15
#26700
05
#26800
15
#26900
05
#27000
15
#27100
05
#27200
15
#27300
05
#27400
15
#27500
05
#27600
15
#27700
05
#27800
15
#27900
05
#28000
15
#28100
05
#28200
15
#28300
05
#28400
15
#28500
05
#28600
15
#28700
05
#28800
15
#28900
05
#29000
15
#29100
05
#29200
15
#29300
05
#29400
15
#29500
05
#29600
15
#29700
05
#29800
15
#29900
05
#30000
15
#30100
05
#30200
15
#30300
05
#30400
15
#30500
05
#30600
15
#30700
05
#30800
15
#30900
05
#31000
15
#31100
05
#31200
15
#31300
05
#31400
15
#31500
05
#31600
15
#31700
05
#31800
15
#31900
05
#32000
15
#32100
05
#32200
15
#32300
05
#32400
15
#32500
05
#32600
15
#32700
05
#32800
15
#32900
05
#33000
15
#33100
05
#33200
15
#33300
05
#33400
15
#33500
05
#33600
15
#33700
05
#33800
15
#33900
05
#34000
15
#34100
05
#34200
15
#34300
05
#34400
15
#34500
05
#34600
15
#34700
05
#34800
15
#34900
05
#35000
15
#35100
05
#35200
15
#35300
05
#35400
15
#35500
05
#35600
15
#35700
05
#35800
15
#35900
05
#36000
15
#36100
05
#36200
15
#36300
05
#36400
15
#36500
05
#36600
15
#36700
05
#36800
15
#36900
05
#37000
15
#37100
05
#37200
15
#37300
05
#37400
15
#37500
05
#37600
15
#37700
05
#37800
15
#37900
05
#38000
15
#38100
05
#38200
15
#38300
05
#38400
15
#38500
05
#38600
15
#38700
05
#38800
15
#38900
05
#39000
15
#39100
05
#39200
15
#39300
05
#39400
15
#39500
05
#39600
15
#39700
05
#39800
15
#39900
05
#40000
15
#40100
05
#40200
15
#40300
05
#40400
15
#40500
05
#40600
15
#40700
05
#40800
15
#40900
05
#41000
15
#41100
05
#41200
15
#41300
05
#41400
15
#41500
05
#41600
15
#41700
05
#41800
15
#41900
05
#42000
15
#42100
05
#42200
15
#42300
05
#42400
15
#42500
05
#42600
15
#42700
05
#42800
15
#42900
05
#43000
15
#43100
05
#43200
15
#43300
05
#43400
15
#43500
05
#43600
15
#43700
05
#43800
15
#43900
05
#44000
15
#44100
05
#44200
15
#44300
05
#44400
15
#44500
05
#44600
15
#44700
05
#44800
15
#44900
05
#45000
15
#45100
05
#45200
15
#45300
05
#45400
15
#45500
05
#45600
15
#45700
05
#45800
15
#45900
05
#46000
15
#46100
05
#46200
15
#46300
05
#46400
15
#46500
05
#46600
15
#46700
05
#46800
15
#46900
05
#47000
15
#47100
05
#47200
15
#47300
05
#47400
15
#47500
05
#47600
15
#47700
05
#47800
15
#47900
05
#48000
15
#48100
05
#48200
15
#48300
05
#48400
15
#48500
05
#48600
15
#48700
05
#48800
15
#48900
05
#49000
15
#49100
05
#49200
15
#49300
05
#49400
15
#49500
05
#49600
15
#49700
05
#49800
15
#49900
05
#50000
15
#50100
05
#50200
15
#50300
05
#50400
15
#50500
05
#50600
15
#50700
05
#50800
15
#50900
05
#51000
15
#51100
05
#51200
15
#51300
05
#51400
15
#51500
05
#51600
15
#51700
05
#51800
15
#51900
05
#52000
15
#52100
05
#52200
15
#52300
05
#52400
15
#52500
05
#52600
15
#52700
05
#52800
15
#52900
05
#53000
15
#53100
05
#53200
15
#53300
05
#53400
15
#53500
05
#53600
15
#53700
05
#53800
15
#53900
05
#54000
15
#54100
05
#54200
15
#54300
05
#54400
15
#54500
05
#54600
15
#54700
05
#54800
15
#54900
05
#55000
15
#55100
05
#55200
15
#55300
05
#55400
15
#55500
05
#55600
15
#55700
05
#55800
15
#55900
05
#56000
15
#56100
05
#56200
15
#56300
05
#56400
15
#56500
05
#56600
15
#56700
05
#56800
15
#56900
05
#57000
15
#57100
05
#57200
15
#57300
05
#57400
15
#57500
05
#57600
15
#57700
05
#57800
15
#57900
05
#58000
15
#58100
05
#58200
15
#58300
05
#58400
15
#58500
05
#58600
15
#58700
05
#58800
15
#58900
05
#59000
15
#59100
05
#59200
15
#59300
05
#59400
15
#59500
05
#59600
15
#59700
05
#59800
15
#59900
05
#60000
15
#60100
05
#60200
15
#60250
